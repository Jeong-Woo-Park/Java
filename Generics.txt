제네릭스(Generics) : 다양한 타입의 객체들을 다루는 메소드나 컬렉션 클래스에 컴파일 시의
타입 체크를 해주는 기능

타입 안정성 제공, 타입체크와 형변환 생략 가능 

ex)
ArrayList<Tv> tvList = new ArrayList<Tv>();
tvList.add(new Tv());
// tvList.add(new Audio());  불가능

제네릭 다형성

제네릭 객체를 생성할 때, 참조벼수에 지정해준 제네릭 타입과 생성자에 지정해준 제네릭 타입이 일치해야한다.
상속 관계에 있더라도 일치해야만 에러가 발생하지 않는다.

ex)
ArrayList<Tv> list = new ArrayList<Tv>() //ok
ArrayList<Product> list = new ArrayList<Tv> //불가능

List<Tv> list = new ArrayList<Tv> //ok

product의 자식이 tv와 audio라면
ArrayList<Product> list = new ArrayList<Product>();
list.add(new Tv());
list.add(new Audio());


제한된 제네릭 클래스
<T extends 클래스이름>
클래스 이름의 자손만 타입으로 지정가능하게 된다.

클래스가 아니라 인터페이스를 구현해야 한다는 제약이 필요하다면 
이때도 extends를 사용한다. implements를 사용하지 않는다.

제네릭스의 제약(좀 더 이해가 필요함)

1. static 멤버에 타입 변수 T를 사용할 수 없다.
2. 제네릭 타입의 배열을 생성하는 것 허용하지 않는다, 제네릭 배열 타입의 참조 변수 선언은 가능


와일드 카드 : ? 기호 사용
1. <? extends T> : 와일드 카드의 상한 제한, T와 그 자손들만 가능
2. <? super T> : 와일드 카드의 하한 제한, T와 그 조상들만 가능
3. <?> : 제한없음

제네릭 메서드
ex)
static <T> void sort(List<T> list, Comparator<? super T> c)


열거형 : 여러 상수를 선언해야 할 때, 편리하게 선언할 수 있는 방법
ex)
eunm { ~, ~, ~, ~}
 
















